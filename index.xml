<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>୧ʕ •ᴥ•ʔ୨ Silent Lake</title><link>https://pagliacii.github.io/silent-lake/</link><description>Recent content on ୧ʕ •ᴥ•ʔ୨ Silent Lake</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>huangmianrui0310@gmail.com (Jason Huang)</managingEditor><webMaster>huangmianrui0310@gmail.com (Jason Huang)</webMaster><copyright>[Jason Huang](https://github.com/Pagliacii) © 2024</copyright><atom:link href="https://pagliacii.github.io/silent-lake/index.xml" rel="self" type="application/rss+xml"/><item><title>Home Row Mods</title><link>https://pagliacii.github.io/silent-lake/blog/home-row-mods/</link><pubDate>Tue, 08 Oct 2024 23:23:04 +0800</pubDate><author>huangmianrui0310@gmail.com (Jason Huang)</author><guid>https://pagliacii.github.io/silent-lake/blog/home-row-mods/</guid><description>什么是 home row？ Home row 是键盘上中间的那一排按键。以常见的 QWERTY 键盘为例，home row 就是 ASDFGHJKL; 这一排按键。在 F 和 J 键上还有定位用的横杠，方便盲打时手指快速移动到相应的位置。
什么是 mods？ Mods 全称是 Modifiers，指的是键盘上的修饰键，如 ⌃ Ctrl、⎇ Alt、⇧ Shift、⊞ Win、⌘ Command 等。
什么是 home row mods？ 通常来说，Mods 按键都位于键盘的左下角和右下角，处在 home row 上的手不得不移动到边上才能够到这些按键。而 home row mods 则是借助于 QMK 的 Mod-tap 功能，来让 home row 按键作为两个按键来使用，点按（tap）时则是键帽上印着的按键，按住（hold）时则是映射过去的 Mods 按键。
常见的 home row mods 映射 这里以 QWERTY 键盘为例，介绍一些常见的 home row mods 映射。
首先约定一些符号：
Full Modifier Name Abbreviation Symbol Shift S ⇧ Control C ⎈ Alt/Option A ⎇ GUI/Win/Command G ◆ No modifier/mod-tap _ _ 接下来就是常见的映射：</description><content:encoded><![CDATA[<h2 id="什么是-home-row">什么是 home row？</h2>
<p><a href="https://en.wikipedia.org/wiki/Touch_typing#Home_row">Home row</a> 是键盘上中间的那一排按键。以常见的 <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY</a> 键盘为例，home row 就是 <kbd>A</kbd><kbd>S</kbd><kbd>D</kbd><kbd>F</kbd><kbd>G</kbd><kbd>H</kbd><kbd>J</kbd><kbd>K</kbd><kbd>L</kbd><kbd>;</kbd> 这一排按键。在 <kbd>F</kbd> 和 <kbd>J</kbd> 键上还有定位用的横杠，方便盲打时手指快速移动到相应的位置。</p>
<h2 id="什么是-mods">什么是 mods？</h2>
<p>Mods 全称是 <a href="https://en.wikipedia.org/wiki/Modifier_key">Modifiers</a>，指的是键盘上的修饰键，如 <kbd>⌃ Ctrl</kbd>、<kbd>⎇ Alt</kbd>、<kbd>⇧ Shift</kbd>、<kbd>⊞ Win</kbd>、<kbd>⌘ Command</kbd> 等。</p>
<h2 id="什么是-home-row-mods">什么是 home row mods？</h2>
<p>通常来说，Mods 按键都位于键盘的左下角和右下角，处在 home row 上的手不得不移动到边上才能够到这些按键。而 home row mods 则是借助于 <a href="https://qmk.fm/">QMK</a> 的 <a href="https://docs.qmk.fm/mod_tap">Mod-tap</a> 功能，来让 home row 按键作为<a href="https://en.wikipedia.org/wiki/Modifier_key#Dual-role_keys">两个按键</a>来使用，点按（<strong>tap</strong>）时则是键帽上印着的按键，按住（<strong>hold</strong>）时则是映射过去的 Mods 按键。</p>
<h2 id="常见的-home-row-mods-映射">常见的 home row mods 映射</h2>
<p>这里以 QWERTY 键盘为例，介绍一些常见的 home row mods 映射。</p>
<p>首先约定一些符号：</p>
<table>
<thead>
<tr>
<th>Full Modifier Name</th>
<th>Abbreviation</th>
<th>Symbol</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Shift_key">Shift</a></td>
<td>S</td>
<td>⇧</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Control_key">Control</a></td>
<td>C</td>
<td>⎈</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Alt_key">Alt</a>/<a href="https://en.wikipedia.org/wiki/Option_key">Option</a></td>
<td>A</td>
<td>⎇</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Super_key_(keyboard_button)">GUI</a>/<a href="https://en.wikipedia.org/wiki/Windows_key">Win</a>/<a href="https://en.wikipedia.org/wiki/Command_key">Command</a></td>
<td>G</td>
<td>◆</td>
</tr>
<tr>
<td>No modifier/mod-tap</td>
<td>_</td>
<td>_</td>
</tr>
</tbody>
</table>
<p>接下来就是常见的映射：</p>
<ul>
<li><strong>SCGA</strong>: <kbd>⇧</kbd><kbd>⎈</kbd><kbd>◆</kbd><kbd>⎇</kbd><kbd>_</kbd><kbd>_</kbd><kbd>⎇</kbd><kbd>◆</kbd><kbd>⎈</kbd><kbd>⇧</kbd></li>
<li><strong>GASC</strong>: <kbd>◆</kbd><kbd>⎇</kbd><kbd>⇧</kbd><kbd>⎈</kbd><kbd>_</kbd><kbd>_</kbd><kbd>⎈</kbd><kbd>⇧</kbd><kbd>⎇</kbd><kbd>◆</kbd></li>
<li><strong>GACS</strong>: <kbd>◆</kbd><kbd>⎇</kbd><kbd>⎈</kbd><kbd>⇧</kbd><kbd>_</kbd><kbd>_</kbd><kbd>⇧</kbd><kbd>⎈</kbd><kbd>⎇</kbd><kbd>◆</kbd></li>
<li><strong>CAGS</strong>: <kbd>⎈</kbd><kbd>⎇</kbd><kbd>◆</kbd><kbd>⇧</kbd><kbd>_</kbd><kbd>_</kbd><kbd>⇧</kbd><kbd>⎇</kbd><kbd>⎈</kbd><kbd>◆</kbd></li>
</ul>
<p>以 <strong>GASC</strong> 为例，这是在 QWETRY home row 上的映射关系：</p>
<table>
<thead>
<tr>
<th>Home row</th>
<th><kbd>A</kbd></th>
<th><kbd>S</kbd></th>
<th><kbd>D</kbd></th>
<th><kbd>F</kbd></th>
<th><kbd>G</kbd></th>
<th><kbd>H</kbd></th>
<th><kbd>J</kbd></th>
<th><kbd>K</kbd></th>
<th><kbd>L</kbd></th>
<th><kbd>;</kbd></th>
</tr>
</thead>
<tbody>
<tr>
<td>Tap</td>
<td><kbd>A</kbd></td>
<td><kbd>S</kbd></td>
<td><kbd>D</kbd></td>
<td><kbd>F</kbd></td>
<td><kbd>G</kbd></td>
<td><kbd>H</kbd></td>
<td><kbd>J</kbd></td>
<td><kbd>K</kbd></td>
<td><kbd>L</kbd></td>
<td><kbd>;</kbd></td>
</tr>
<tr>
<td>Hold</td>
<td><kbd>◆</kbd></td>
<td><kbd>⎇</kbd></td>
<td><kbd>⇧</kbd></td>
<td><kbd>⎈</kbd></td>
<td><kbd>_</kbd></td>
<td><kbd>_</kbd></td>
<td><kbd>⎈</kbd></td>
<td><kbd>⇧</kbd></td>
<td><kbd>⎇</kbd></td>
<td><kbd>◆</kbd></td>
</tr>
</tbody>
</table>
<h3 id="上述映射的优缺点">上述映射的优缺点</h3>
<ul>
<li><strong>SCGA</strong>: 这是直接将 Mods 按键在键盘上的顺序，映射到 home row 的结果。忽略了 Mods 按键的使用频率，比如将 <kbd>⎇</kbd> 和 <kbd>◆</kbd> 放在了最方便按到的食指和中指的位置，但是很明显这比 <kbd>⇧</kbd> 和 <kbd>⎈</kbd> 使用频率要低得多。</li>
<li><strong>GASC</strong>: 这种布局将 <kbd>⎈</kbd> 和 <kbd>⇧</kbd> 放在了食指和中指的位置，将使用频率更高的按键放在更灵活的手指上，更加合理和舒适。而且将 <kbd>⇧</kbd> 放在中指上，食指就可以很方便地去按其他按键从而输入大写字母。缺点就是 <kbd>◆</kbd> 在尾指位置上，在 macOS 上就没那么方便按。</li>
<li><strong>GACS</strong>: 这种布局则是将使用频率最高的修饰键放在最灵活的手指下，使用频率最低的放在最弱的手指处。同时它避免了 <strong>GASC</strong> 布局无法单手 <kbd>Ctrl</kbd>+<kbd>Letter</kbd> 的尴尬局面，比如 <kbd>Ctrl</kbd>+<kbd>C</kbd>。</li>
<li><strong>CAGS</strong>: 这种布局则是在 macOS 上更加合理和方便。</li>
</ul>
<p>另外这些 home row key 就不能长按了，因为长按时会被 Mods 按键覆盖掉。这在玩游戏时会造成不便，所以建议定义一个 game mode layer 来禁用 home row mods。</p>
<h2 id="组合修饰键">组合修饰键</h2>
<p>还有一种用法就是在 lower row 上，即 home row 下一排的按键，将一些常用组合修饰键映射上去。比如 <kbd>Ctrl</kbd>+<kbd>Shift</kbd> 映射到 <kbd>C</kbd> 上。</p>
<p>这里举一个例子：</p>
<table>
<thead>
<tr>
<th>Lower row</th>
<th style="text-align:center"><kbd>Z</kbd></th>
<th style="text-align:center"><kbd>X</kbd></th>
<th style="text-align:center"><kbd>C</kbd></th>
<th style="text-align:center"><kbd>V</kbd></th>
<th style="text-align:center"><kbd>B</kbd></th>
<th style="text-align:center"><kbd>N</kbd></th>
<th style="text-align:center"><kbd>M</kbd></th>
<th style="text-align:center"><kbd>,</kbd></th>
<th style="text-align:center"><kbd>.</kbd></th>
</tr>
</thead>
<tbody>
<tr>
<td>Tap</td>
<td style="text-align:center"><kbd>Z</kbd></td>
<td style="text-align:center"><kbd>X</kbd></td>
<td style="text-align:center"><kbd>C</kbd></td>
<td style="text-align:center"><kbd>V</kbd></td>
<td style="text-align:center"><kbd>B</kbd></td>
<td style="text-align:center"><kbd>N</kbd></td>
<td style="text-align:center"><kbd>M</kbd></td>
<td style="text-align:center"><kbd>,</kbd></td>
<td style="text-align:center"><kbd>.</kbd></td>
</tr>
<tr>
<td>Hold</td>
<td style="text-align:center"><kbd>◆</kbd>+<kbd>⎇</kbd></td>
<td style="text-align:center"><kbd>⎇</kbd>+<kbd>⎈</kbd></td>
<td style="text-align:center"><kbd>⎈</kbd>+<kbd>⇧</kbd></td>
<td style="text-align:center"><kbd>V</kbd></td>
<td style="text-align:center"><kbd>B</kbd></td>
<td style="text-align:center"><kbd>N</kbd></td>
<td style="text-align:center"><kbd>⇧</kbd>+<kbd>⎈</kbd></td>
<td style="text-align:center"><kbd>⎈</kbd>+<kbd>⎇</kbd></td>
<td style="text-align:center"><kbd>⎇</kbd>+<kbd>◆</kbd></td>
</tr>
</tbody>
</table>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">如果想了解更多，可以阅读 <a href="https://precondition.github.io/home-row-mods">A guide to home row mods</a>，里面有更多详细说明和 <a href="https://precondition.github.io/home-row-mods#tips-and-tricks">tips</a>。不过涉及了很多 QMK 相关的内容，如果不打算使用 QMK 的话，这部分可以略过。</p>
</div>

<h2 id="kanata-实现">Kanata 实现</h2>
<p>我选择了 <a href="https://github.com/jtroo/kanata">kanata</a> 而不是 <a href="https://precondition.github.io/home-row-mods">A guide to home row mods</a> 里<a href="https://precondition.github.io/home-row-mods#using-home-row-mods-with-kmonad">提及</a>的 <a href="https://github.com/kmonad/kmonad">KMonad</a> 作为实现 home row mods 的工具。不过 kanata 是受 KMonad 启发而用 <a href="https://www.rust-lang.org/">Rust</a> 写的，功能上差不多。</p>
<p>Kanata 仓库里就有两份 home row mods 的示例配置，分别是 <a href="https://github.com/jtroo/kanata/blob/main/cfg_samples/home-row-mod-basic.kbd">home-row-mod-basic.kbd</a> 和 <a href="https://github.com/jtroo/kanata/blob/main/cfg_samples/home-row-mod-advanced.kbd">home-row-mod-advanced.kbd</a>。</p>
<p>我之前也写过一篇使用 kanata 将 <kbd>CapsLock</kbd> 映射成 <kbd>Ctrl</kbd> 和 <kbd>Esc</kbd> 的<a href="https://pagliacii.github.io/silent-lake/blog/using-capslock-as-ctrl-and-escape/">文章</a>，可以作为 kanata 的简单介绍。</p>
<p>也可以使用 <a href="https://jtroo.github.io/">kanata online simulator</a> 来测试配置是否正确。</p>
<p>下面是我目前使用的 kanata 配置：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">(</span><span class="nv">defsrc</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nv">esc</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="p">(</span><span class="nv">deflayer</span> <span class="nv">qwerty</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nv">@eca</span> <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">@q</span><span class="o">`</span>  <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nv">@cap</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="nv">@cap</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="nv">cap</span> <span class="p">(</span><span class="nv">tap-hold-press</span> <span class="mi">200</span> <span class="mi">200</span> <span class="nv">esc</span> <span class="nv">lctl</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">  <span class="c1">;; 1 tap : &#34;Escape&#34;</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">  <span class="c1">;; 2 tap : &#34;Caps Lock&#34;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">  <span class="nv">eca</span> <span class="p">(</span><span class="nv">tap-dance</span> <span class="mi">200</span> <span class="p">(</span><span class="nv">esc</span> <span class="nv">caps</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">  <span class="c1">;; 1 tap : &#34;q&#34;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">  <span class="c1">;; 2 tap : &#34;`&#34;</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">  <span class="nv">q</span><span class="o">`</span> <span class="p">(</span><span class="nv">tap-dance</span> <span class="mi">200</span> <span class="p">(</span><span class="nv">q</span> <span class="nv">grave</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>我打算采用 <strong>GASC</strong> 布局。至于无法单手 <kbd>Ctrl</kbd>+<kbd>Letter</kbd> 的问题，我可以通过 <kbd>CapsLock</kbd>+<kdb>Letter</kdb> 来代替，因为我的 <kbd>CapsLock</kbd> 已经是 dual-role key 了。</p>
<h3 id="defalias">defalias</h3>
<p>首先需要定义一些 <code>tap-hold</code> 别名来描述 Dual role keys，这里可以参考 kanata 示例配置里的 <a href="https://github.com/jtroo/kanata/blob/main/cfg_samples/home-row-mod-advanced.kbd">home-row-mod-advanced.kbd</a>：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="c1">;; home row mods -- GASC</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nv">met_a</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">a</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">lmet</span> <span class="nv">$left-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nv">alt_s</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">s</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">lalt</span> <span class="nv">$left-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nv">sft_d</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">d</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">lsft</span> <span class="nv">$left-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nv">ctl_f</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">f</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">lctl</span> <span class="nv">$left-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nv">ctl_j</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">j</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">rctl</span> <span class="nv">$right-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="nv">sft_k</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">k</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">rsft</span> <span class="nv">$right-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nv">alt_l</span> <span class="p">(</span><span class="nv">tap-hold-release-keys</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="p">(</span><span class="nv">multi</span> <span class="nv">l</span> <span class="nv">@tap</span><span class="p">)</span> <span class="nv">lalt</span> <span class="nv">$right-hand-keys</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="nv">met_</span><span class="c1">; (tap-hold-release-keys $tt $ht (multi ; @tap) rmet $right-hand-keys)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>在上面的 alias 里用到的 action 是 <a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#tap-hold"><code>tap-hold-release-keys</code></a>，它的作用是当第 5 个参数中的按键在当前动作发生时被按下，提前触发一次点按，减少同手滚动输入的误差。</p>
<p>比如你想连按 <kbd>k</kbd> 和 <kbd>l</kbd> 来输入 <code>kl</code>，使用 <code>tap-hold-release-keys</code> 就可以减少输入成 <kbd>Shift</kbd><kbd>l</kbd> 的可能性。</p>
<p>然后再定义一些变量：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">(</span><span class="nb">defvar</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nv">tap-timeout</span>   <span class="mi">50</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nv">hold-timeout</span>  <span class="mi">200</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nv">tt</span> <span class="nv">$tap-timeout</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nv">ht</span> <span class="nv">$hold-timeout</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nv">left-hand-keys</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="nv">q</span> <span class="nv">w</span> <span class="nv">e</span> <span class="nv">r</span> <span class="no">t</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nv">a</span> <span class="nv">s</span> <span class="nv">d</span> <span class="nv">f</span> <span class="nv">g</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="nv">z</span> <span class="nv">x</span> <span class="nv">c</span> <span class="nv">v</span> <span class="nv">b</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nv">right-hand-keys</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="nv">y</span> <span class="nv">u</span> <span class="nv">i</span> <span class="nv">o</span> <span class="nv">p</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="nv">h</span> <span class="nv">j</span> <span class="nv">k</span> <span class="nv">l</span> <span class="c1">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="nv">n</span> <span class="nv">m</span> <span class="o">,</span> <span class="o">.</span> <span class="nf">/</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>其中 <code>left-hand-keys</code> 和 <code>right-hand-keys</code> 变量分别是左手和右手的按键，用作 <code>tap-hold-release-keys</code> 的第 5 个参数。</p>
<p>至于 <code>tap-timeout</code> 和 <code>hold-timeout</code> 则可以根据自己的按键习惯来进行设置。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">tap</span> <span class="p">(</span><span class="nv">multi</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nv">@nomods</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="p">(</span><span class="nv">on-idle-fakekey</span> <span class="nv">to-base</span> <span class="nv">tap</span> <span class="mi">20</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p><code>tap</code> 则是一个虚拟按键，用于在 home row 按键点按触发时临时切换至 base layer，以防止误触。具体定义如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">deffakekeys</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">to-base</span> <span class="p">(</span><span class="nv">layer-switch</span> <span class="nv">qwerty</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><h3 id="deflayer">deflayer</h3>
<p>接着定义 <code>qwerty</code> 层：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">deflayer</span> <span class="nv">qwerty</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">esc</span>   <span class="mi">1</span>      <span class="mi">2</span>      <span class="mi">3</span>      <span class="mi">4</span>      <span class="mi">5</span>      <span class="mi">6</span>      <span class="mi">7</span>      <span class="mi">8</span>      <span class="mi">9</span>      <span class="mi">0</span>      <span class="nf">-</span>      <span class="nf">=</span>      <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nv">tab</span>   <span class="nv">q</span>      <span class="nv">w</span>      <span class="nv">e</span>      <span class="nv">r</span>      <span class="no">t</span>      <span class="nv">y</span>      <span class="nv">u</span>      <span class="nv">i</span>      <span class="nv">o</span>      <span class="nv">p</span>      <span class="nv">[</span>      <span class="nv">]</span>      <span class="nv">@bsl</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">@cap</span>  <span class="nv">@met_a</span> <span class="nv">@alt_s</span> <span class="nv">@sft_d</span> <span class="nv">@ctl_f</span> <span class="nv">g</span>      <span class="nv">h</span>      <span class="nv">@ctl_j</span> <span class="nv">@sft_k</span> <span class="nv">@alt_l</span> <span class="nv">@met_</span><span class="c1">; &#39;      ret</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nv">lsft</span>  <span class="nv">z</span>      <span class="nv">x</span>      <span class="nv">c</span>      <span class="nv">v</span>      <span class="nv">b</span>      <span class="nv">n</span>      <span class="nv">m</span>      <span class="o">,</span>      <span class="o">.</span>      <span class="nf">/</span>      <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="nv">lctl</span>  <span class="nv">lmet</span>   <span class="nv">lalt</span>                 <span class="nv">spc</span>                  <span class="nv">ralt</span>   <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>以及 <code>nomods-layer</code>：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">deflayer</span> <span class="nv">nomods-layer</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">esc</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="nv">@bsl</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">@cap</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>我还定义了一个 <code>layers</code> 层，用于切换到其他层，并把它映射到 <kbd>\</kbd> 上：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">(</span><span class="nv">deflayermap</span> <span class="p">(</span><span class="nv">layers</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="mi">1</span>    <span class="nv">@base</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="mi">2</span>    <span class="nv">@nomods</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="mi">3</span>    <span class="nv">lrld</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="c1">;; toggle layer aliases</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="nv">lay</span> <span class="p">(</span><span class="nv">layer-toggle</span> <span class="nv">layers</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nv">bsl</span> <span class="p">(</span><span class="nv">tap-hold-release</span> <span class="nv">$tt</span> <span class="nv">$ht</span> <span class="nv">\ @lay</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">  <span class="c1">;; change the base layer between base and nomods-layer</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nv">base</span> <span class="p">(</span><span class="nv">layer-switch</span> <span class="nv">qwerty</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nv">nomods</span> <span class="p">(</span><span class="nv">layer-switch</span> <span class="nv">nomods-layer</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>通过按住 <kbd>\</kbd> 键，可以切换到 <code>layers</code> 层，然后用 <kbd>1</kbd>、<kbd>2</kbd>、<kbd>3</kbd> 键切换到不同的层。</p>
<h3 id="完整配置">完整配置</h3>
<p>至此，我的配置就完成了。完整的配置可以看<a href="https://github.com/Pagliacii/dotfiles/blob/main/kanata/.config/kanata/kanata.kbd">这里</a>。</p>
]]></content:encoded></item><item><title>将 CapsLock 映射成 Ctrl 和 Escape</title><link>https://pagliacii.github.io/silent-lake/blog/using-capslock-as-ctrl-and-escape/</link><pubDate>Sun, 18 Aug 2024 11:51:20 +0800</pubDate><author>huangmianrui0310@gmail.com (Jason Huang)</author><guid>https://pagliacii.github.io/silent-lake/blog/using-capslock-as-ctrl-and-escape/</guid><description>&lt;p>常见的 &lt;a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY 键盘&lt;/a>会将 &lt;kbd>CapsLock&lt;/kbd> 键放在 &lt;a href="https://en.wikipedia.org/wiki/Touch_typing#Home_row">Home row&lt;/a>
的最左侧，也是最靠近左手小指的地方，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/03b498d2-6700-4d6a-9268-1502faedb131" alt="QWERTY 键盘的按键排列">&lt;/p>
&lt;p>但在日常使用中，&lt;kbd>CapsLock&lt;/kbd> 的使用频率很低。让这么一个使用频率低的键占据一个很方便按到的位置（&lt;strong>最靠近左手小指&lt;/strong>)，实际上是一种浪费。
你可以想想，如果是 &lt;kbd>Ctrl&lt;/kbd> 或者 &lt;kbd>Esc&lt;/kbd> 放在 &lt;kbd>CapsLock&lt;/kbd> 的位置，是不是日常使用就不需要伸手指去“够”它们？只要挪一下小指就行了。
特别是对于 &lt;a href="https://www.vim.org/">Vim&lt;/a>/&lt;a href="https://neovim.io/">Neovim&lt;/a>/&lt;a href="https://www.gnu.org/software/emacs/">Emacs&lt;/a>
等用户来说，更是如虎添翼。&lt;/p>
&lt;p>而且我们还可以做到更灵活的映射，即点按（tap）&lt;kbd>CapsLock&lt;/kbd> 时是 &lt;kbd>Esc&lt;/kbd>，长按（hold）则是 &lt;kbd>Ctrl&lt;/kbd>。
这样在使用 &lt;strong>Vim/Neovim&lt;/strong> 的时候会更方便，无论是切换 mode 还是按键序列。&lt;/p></description><content:encoded><![CDATA[<p>常见的 <a href="https://en.wikipedia.org/wiki/QWERTY">QWERTY 键盘</a>会将 <kbd>CapsLock</kbd> 键放在 <a href="https://en.wikipedia.org/wiki/Touch_typing#Home_row">Home row</a>
的最左侧，也是最靠近左手小指的地方，如下图所示：</p>
<p><img src="https://github.com/user-attachments/assets/03b498d2-6700-4d6a-9268-1502faedb131" alt="QWERTY 键盘的按键排列"></p>
<p>但在日常使用中，<kbd>CapsLock</kbd> 的使用频率很低。让这么一个使用频率低的键占据一个很方便按到的位置（<strong>最靠近左手小指</strong>)，实际上是一种浪费。
你可以想想，如果是 <kbd>Ctrl</kbd> 或者 <kbd>Esc</kbd> 放在 <kbd>CapsLock</kbd> 的位置，是不是日常使用就不需要伸手指去“够”它们？只要挪一下小指就行了。
特别是对于 <a href="https://www.vim.org/">Vim</a>/<a href="https://neovim.io/">Neovim</a>/<a href="https://www.gnu.org/software/emacs/">Emacs</a>
等用户来说，更是如虎添翼。</p>
<p>而且我们还可以做到更灵活的映射，即点按（tap）<kbd>CapsLock</kbd> 时是 <kbd>Esc</kbd>，长按（hold）则是 <kbd>Ctrl</kbd>。
这样在使用 <strong>Vim/Neovim</strong> 的时候会更方便，无论是切换 mode 还是按键序列。</p>
<p>在 Linux 上可以用 <a href="https://github.com/alols/xcape">xcape</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，而在 macOS 上则可以使用 <a href="https://karabiner-elements.pqrs.org/">karabiner-elements</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 来实现。
在 Windows 上并没有简单易用的方案，只有基于 <a href="https://www.autohotkey.com/">AutoHotkey</a> 的方案<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>和这个软件 <a href="https://github.com/ililim/dual-key-remap">dual-key-remap</a>。
但是我测试下来都不起作用，所以在 Windows 上一直没用上这种灵活的 <kbd>CapsLock</kbd> 映射。</p>
<p>直到最近我发现了一个用 <a href="https://www.rust-lang.org/">Rust</a> 写的跨平台软件 <a href="https://github.com/jtroo/kanata">kanata</a>。
接下来我就简单介绍一下如何使用 kanata 来实现 <kbd>CapsLock</kbd> 的灵活映射。</p>
<h2 id="安装">安装</h2>
<p>首先需要安装 <a href="https://github.com/jtroo/kanata">kanata</a>，其实也没有特别复杂的操作，参考 <a href="https://github.com/jtroo/kanata/blob/main/README.md">README</a> 就行。
可以选择下载预编译好的<a href="https://github.com/jtroo/kanata/releases">包</a>，也可以通过包管理器进行下载。
我在 Windows 上使用 <a href="https://scoop.sh/">Scoop</a> 来进行安装，命令如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">scoop</span> <span class="n">install</span> <span class="n">kanata</span></span></span></code></pre></div><p>kanata 默认不会在后台跑，而且它也没有什么托盘图标，需要在命令行里启动：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">kanata</span> <span class="p">-</span><span class="n">-cfg</span> <span class="n">kanata</span><span class="p">.</span><span class="n">kbd</span></span></span></code></pre></div><div class="alert alert-tip">
  <p class="alert-title">
    <span class="alert-icon alert-tip-icon">
      <svg class="octicon octicon-light-bulb mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z"></path>
      </svg>
      Tip
    </span>
   </p>
   <p class="alert-text">如果需要托盘图标的话，可以使用这个库 <a href="https://github.com/rszyma/kanata-tray">kanata-tray</a>。</p>
</div>

<div class="alert alert-tip">
  <p class="alert-title">
    <span class="alert-icon alert-tip-icon">
      <svg class="octicon octicon-light-bulb mr-2" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M8 1.5c-2.363 0-4 1.69-4 3.75 0 .984.424 1.625.984 2.304l.214.253c.223.264.47.556.673.848.284.411.537.896.621 1.49a.75.75 0 0 1-1.484.211c-.04-.282-.163-.547-.37-.847a8.456 8.456 0 0 0-.542-.68c-.084-.1-.173-.205-.268-.32C3.201 7.75 2.5 6.766 2.5 5.25 2.5 2.31 4.863 0 8 0s5.5 2.31 5.5 5.25c0 1.516-.701 2.5-1.328 3.259-.095.115-.184.22-.268.319-.207.245-.383.453-.541.681-.208.3-.33.565-.37.847a.751.751 0 0 1-1.485-.212c.084-.593.337-1.078.621-1.489.203-.292.45-.584.673-.848.075-.088.147-.173.213-.253.561-.679.985-1.32.985-2.304 0-2.06-1.637-3.75-4-3.75ZM5.75 12h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM6 15.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 0 1.5h-2.5a.75.75 0 0 1-.75-.75Z"></path>
      </svg>
      Tip
    </span>
   </p>
   <p class="alert-text">也可以使用 <a href="https://github.com/jtroo/kanata/releases/tag/v1.7.0-prerelease-1">v1.7.0-prerelease-1</a> 版本。
内置了 Windows 下的托盘图标，详见这个 <a href="https://github.com/jtroo/kanata/pull/990">PR</a>。</p>
</div>

<p>如果想让它开机自启的话，那么可以通过在 <code>%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup</code>
目录下创建一个 Shortcut 来实现。在 Target 这一栏填入下面这一行命令：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">C:</span><span class="p">\</span><span class="n">Windows</span><span class="p">\</span><span class="n">System32</span><span class="p">\</span><span class="n">conhost</span><span class="p">.</span><span class="py">exe</span> <span class="p">-</span><span class="n">-headless</span> <span class="p">&lt;</span><span class="nb">path-to</span><span class="n">-your-kanata</span><span class="p">.</span><span class="n">exe</span><span class="p">&gt;</span> <span class="p">-</span><span class="n">-cfg</span> <span class="p">&lt;</span><span class="nb">path-to</span><span class="n">-your-kanata</span><span class="p">.</span><span class="n">kbd</span><span class="p">&gt;</span></span></span></code></pre></div><h2 id="配置">配置</h2>
<p>kanata 的配置使用的是 LISP 的语法来编写的，可以参考这篇 <a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc">Guide</a>
和 <a href="https://github.com/jtroo/kanata/blob/main/cfg_samples">cfg_samples</a>。
另外 kanata 的作者还提供了一个在线的<a href="https://jtroo.github.io/">模拟器</a>来让你测试配置。</p>
<p>和 LISP 不同的地方是，<code>;</code> 不是单行注释符，而是按键 <kbd>;</kbd>，单行注释符是 <code>;;</code>。另外块注释则是 <code>#|</code> 和 <code>|#</code>。</p>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">kanata 配置语法来自于和它相似的项目 <a href="https://github.com/kmonad/kmonad">kmonad</a>，这是一个用 <a href="https://www.haskell.org/">Haskell</a> 写的软件。</p>
</div>

<p>简单来说，kanata 的配置需要有且仅有一个
<a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#defsrc"><code>defsrc</code></a>
以及至少一个
<a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#deflayer"><code>deflayer</code></a>。
前者定义了键盘物理按键的位置，后者则定义了物理按键的映射规则，叫做层（layer）。
层可以有多个，默认会激活第一个 <code>deflayer</code> 所定义的层。</p>
<p>如果想将一个按键映射到另一个按键，则需要使用 <code>defalias</code>。</p>
<h3 id="defsrc">defsrc</h3>
<p>例如一个 QWERTY 键盘 60 配列的键盘配置如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">;; QWERTY 键盘 60 配列</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">(</span><span class="nv">defsrc</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nv">grv</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rmet</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><p>其中 <code>lmet</code> 和 <code>rmet</code> 分别是左 Meta 键和右 Meta 键，也就是 Windows 键。</p>
<p>如果是键盘上没有的按键，在 <code>defsrc</code> 里可以省略。另外如果是键盘自带的特殊键，也可以省略。
比如我使用的的键盘就没有 <code>rmet</code>，同时多了两个 <kbd>Fn</kbd> 和 <kbd>Pn</kbd>，我的配置如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">defsrc</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nv">esc</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><h3 id="deflayer">deflayer</h3>
<p>例如在 QWERTY 键盘上定义一个 <a href="https://en.wikipedia.org/wiki/Dvorak_keyboard_layout">Dvorak</a> 布局层：</p>
<p><img src="https://github.com/user-attachments/assets/ff8f84be-5e92-4884-95a2-e3b780736a9e" alt="Dvorak layout"></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">;; QWERTY 键盘 60 配列</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="p">(</span><span class="nv">defsrc</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nv">grv</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rmet</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1">;; Dvorak 布局</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">(</span><span class="nv">deflayer</span> <span class="nv">dvorak</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nv">grv</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nv">tab</span>  <span class="o">&#39;</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nv">p</span>    <span class="nv">y</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">c</span>    <span class="nv">r</span>    <span class="nv">l</span>    <span class="nf">/</span>    <span class="nf">=</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">o</span>    <span class="nv">e</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">d</span>    <span class="nv">h</span>    <span class="no">t</span>    <span class="nv">n</span>    <span class="nv">s</span>    <span class="nf">-</span>    <span class="nv">ret</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="nv">lsft</span> <span class="c1">;    q    j    k    x    b    m    w    v    z    rsft</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rmet</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><h3 id="defalias--tap-hold">defalias &amp; tap-hold</h3>
<p>想要实现按下 <kbd>CapsLock</kbd> 是 <kbd>Esc</kbd>，长按是 <kbd>Ctrl</kbd>
则需要使用 <code>defalias</code> 和 <code>tap-hold</code> 这个动作来实现。</p>
<p><code>defalias</code> 需要一个
<a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#aliases">alias</a> 和一个
<a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#actions">action</a>，
然后需要在 <code>deflayer</code> 里使用 <code>@alias</code> 来将这个动作映射到某个按键上面。</p>
<p><code>tap-hold</code> 这个动作接受以下 4 个参数：</p>
<ol>
<li>tap timeout (unit: ms)</li>
<li>hold timeout (unit: ms)</li>
<li>tap action</li>
<li>hold action</li>
</ol>
<p><code>tap-hold</code> 还有两个变体动作：</p>
<ol>
<li><code>tap-hold-press</code> 或 <code>tap⬓↓</code></li>
<li><code>tap-hold-release</code> 或 <code>tap⬓↑</code></li>
</ol>
<p>这两个变体动作用于让按键响应更加灵敏而不受 hold timeout 的限制。</p>
<p>我们可以使用 <code>tap-hold-press</code> 来实现，代码如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">;; tap for escape, hold for left ctrl</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span> <span class="nv">cap</span> <span class="p">(</span><span class="nv">tap-hold-press</span> <span class="mi">200</span> <span class="mi">200</span> <span class="nv">esc</span> <span class="nv">lctl</span><span class="p">))</span></span></span></code></pre></div><h3 id="tap-dance">tap-dance</h3>
<p>如果真的需要用上 <kbd>CapsLock</kbd> 的话，可以使用
<a href="https://github.com/jtroo/kanata/blob/main/docs/config.adoc#tap-dance"><code>tap-dance</code></a>
来将之映射到另一个按键下，短按两下触发。</p>
<p>比如映射到 <kbd>Esc</kbd> 上，代码如下：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln">1</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="c1">;; 1 tap : &#34;Escape&#34;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="c1">;; 2 tap : &#34;Caps Lock&#34;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nv">eca</span> <span class="p">(</span><span class="nv">tap-dance</span> <span class="mi">200</span> <span class="p">(</span><span class="nv">esc</span> <span class="nv">caps</span><span class="p">))</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">)</span></span></span></code></pre></div><h2 id="kanatakbd">kanata.kbd</h2>
<p>将以下代码保存为 <code>.kbd</code> 文件，就可以让 kanata 加载这份配置文件，实现更灵活的 <kbd>CapsLock</kbd>：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lisp" data-lang="lisp"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">;; QWERTY 键盘 60 配列</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="p">(</span><span class="nv">defsrc</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="nv">grv</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="nv">caps</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rmet</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1">;; QWERTY 布局 + 灵活的 CapsLock</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">(</span><span class="nv">deflayer</span> <span class="nv">qwerty</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">  <span class="nv">grv</span>  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>    <span class="mi">0</span>    <span class="nf">-</span>    <span class="nf">=</span>    <span class="nv">bspc</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">  <span class="nv">tab</span>  <span class="nv">q</span>    <span class="nv">w</span>    <span class="nv">e</span>    <span class="nv">r</span>    <span class="no">t</span>    <span class="nv">y</span>    <span class="nv">u</span>    <span class="nv">i</span>    <span class="nv">o</span>    <span class="nv">p</span>    <span class="nv">[</span>    <span class="nv">]</span>    <span class="err">\</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="nv">@cap</span> <span class="nv">a</span>    <span class="nv">s</span>    <span class="nv">d</span>    <span class="nv">f</span>    <span class="nv">g</span>    <span class="nv">h</span>    <span class="nv">j</span>    <span class="nv">k</span>    <span class="nv">l</span>    <span class="c1">;    &#39;    ret</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="nv">lsft</span> <span class="nv">z</span>    <span class="nv">x</span>    <span class="nv">c</span>    <span class="nv">v</span>    <span class="nv">b</span>    <span class="nv">n</span>    <span class="nv">m</span>    <span class="o">,</span>    <span class="o">.</span>    <span class="nf">/</span>    <span class="nv">rsft</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">  <span class="nv">lctl</span> <span class="nv">lmet</span> <span class="nv">lalt</span>           <span class="nv">spc</span>            <span class="nv">ralt</span> <span class="nv">rmet</span> <span class="nv">rctl</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="c1">;; 按一下 CapsLock 是 Esc，按住则是左 Ctrl 键</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="p">(</span><span class="nv">defalias</span> <span class="nv">cap</span> <span class="p">(</span><span class="nv">tap-hold-press</span> <span class="mi">200</span> <span class="mi">200</span> <span class="nv">esc</span> <span class="nv">lctl</span><span class="p">))</span></span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://www.jianshu.com/p/6fdc0e0fb266">https://www.jianshu.com/p/6fdc0e0fb266</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p><a href="https://ke-complex-modifications.pqrs.org/#caps_lock_tapped_escape_held_left_control">https://ke-complex-modifications.pqrs.org/#caps_lock_tapped_escape_held_left_control</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p><a href="https://gist.github.com/sedm0784/4443120">https://gist.github.com/sedm0784/4443120</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item><item><title>重置树莓派用户密码</title><link>https://pagliacii.github.io/silent-lake/blog/recover-passwd-raspberry-pi/</link><pubDate>Sun, 31 Mar 2024 23:39:25 +0800</pubDate><author>huangmianrui0310@gmail.com (Jason Huang)</author><guid>https://pagliacii.github.io/silent-lake/blog/recover-passwd-raspberry-pi/</guid><description>如果你也有在树莓派上跑服务的话，那么难免会碰到忘记用户密码的情况。这里记录一下如何在不重新安装系统的情况下重置密码。
准备 首先你需要满足以下条件：
可以接触到树莓派 一个显示器和一个键盘 一台电脑和一个读卡器 修改 cmdline.txt 文件 在断掉树莓派电源的情况下，把 SD 卡拔出来并通过读卡器连接到电脑上，在文件浏览器中找到它里面的 cmdline.txt 文件，然后用编辑器打开它。
cmdline.txt 的内容是类似于下面这样的一行文本：
dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait只需要在上面那行文本的最后加上 init=/bin/sh 来让树莓派系统启动后自动进入 /bin/sh，然后就可以把卡插回树莓派重新启动。
修改密码 给树莓派接上显示器和键盘后，输入以下命令来重新挂载系统的根目录：
$ mount -o remount, rw /接着就可以通过这条命令修改指定用户的密码了，我用的是 DietPi 镜像，所以这里以 dietpi 用户为例：
$ passwd dietpi回车后输入两次密码，就可以输入下面两条命令来正常启动系统：
$ sync $ exec /sbin/init恢复 cmdline.txt 文件 最后还需要再次拔出 SD 卡，把 cmdline.txt 文件里的 init=/bin/sh 移除后重启，就可以通过新密码正常登录了。</description><content:encoded><![CDATA[<p>如果你也有在<a href="https://www.raspberrypi.com/">树莓派</a>上跑服务的话，那么难免会碰到忘记用户密码的情况。这里记录一下如何在不重新安装系统的情况下重置密码。</p>
<h2 id="准备">准备</h2>
<p>首先你需要满足以下条件：</p>
<ol>
<li>可以接触到树莓派</li>
<li>一个显示器和一个键盘</li>
<li>一台电脑和一个读卡器</li>
</ol>
<h2 id="修改-cmdlinetxt-文件">修改 <code>cmdline.txt</code> 文件</h2>
<p>在断掉树莓派电源的情况下，把 SD 卡拔出来并通过读卡器连接到电脑上，在文件浏览器中找到它里面的 <code>cmdline.txt</code> 文件，然后用编辑器打开它。</p>
<p><code>cmdline.txt</code> 的内容是类似于下面这样的一行文本：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait</span></span></code></pre></div><p>只需要在上面那行文本的最后加上 <code>init=/bin/sh</code> 来让树莓派系统启动后自动进入 <code>/bin/sh</code>，然后就可以把卡插回树莓派重新启动。</p>
<h2 id="修改密码">修改密码</h2>
<p>给树莓派接上显示器和键盘后，输入以下命令来重新挂载系统的根目录：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ mount -o remount, rw /</span></span></code></pre></div><p>接着就可以通过这条命令修改指定用户的密码了，我用的是 <a href="https://dietpi.com/">DietPi</a> 镜像，所以这里以 <strong>dietpi</strong> 用户为例：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ passwd dietpi</span></span></code></pre></div><p>回车后输入两次密码，就可以输入下面两条命令来正常启动系统：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ sync
</span></span><span class="line"><span class="cl">$ <span class="nb">exec</span> /sbin/init</span></span></code></pre></div><h2 id="恢复-cmdlinetxt-文件">恢复 <code>cmdline.txt</code> 文件</h2>
<p>最后还需要再次拔出 SD 卡，把 <code>cmdline.txt</code> 文件里的 <code>init=/bin/sh</code> 移除后重启，就可以通过新密码正常登录了。</p>
]]></content:encoded></item><item><title>Python 之“无法访问”的属性</title><link>https://pagliacii.github.io/silent-lake/blog/debugging-cases-python-inaccessible-attribute/</link><pubDate>Thu, 07 Dec 2023 22:38:40 +0800</pubDate><author>huangmianrui0310@gmail.com (Jason Huang)</author><guid>https://pagliacii.github.io/silent-lake/blog/debugging-cases-python-inaccessible-attribute/</guid><description>&lt;p>最近碰到一个 Python 中的奇怪现象：明明在类定义里有着一个属性，但是在实例化后的对象上却无法访问到它，会抛出 &lt;code>AttributeError&lt;/code>。&lt;/p>
&lt;p>虽然 root cause 很简单，但是我觉得这个案例可以作为 debug 的例子，于是就有了这篇文章。&lt;/p></description><content:encoded><![CDATA[<p>最近碰到一个 Python 中的奇怪现象：明明在类定义里有着一个属性，但是在实例化后的对象上却无法访问到它，会抛出 <code>AttributeError</code>。</p>
<p>虽然 root cause 很简单，但是我觉得这个案例可以作为 debug 的例子，于是就有了这篇文章。</p>
<h2 id="示例代码">示例代码</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="n">_fields</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="k">def</span> <span class="fm">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_fields</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">(</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">                <span class="sa">f</span><span class="s2">&#34;&#39;</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">&#39; object has no attribute &#39;</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#39;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="k">class</span> <span class="nc">Unrelated</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Unrelated&#34;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Unrelated</span><span class="p">,</span> <span class="n">Parent</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="nd">@property</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="c1"># access some variable in other module</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">        <span class="k">return</span> <span class="n">OtherModule</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="n">child</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;name&#34;</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">child</span><span class="p">))</span> <span class="c1"># True</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">child</span><span class="o">.</span><span class="n">name</span><span class="p">)</span> <span class="c1"># AttributeError: &#39;Child&#39; object has no attribute &#39;name&#39;</span></span></span></code></pre></div><h2 id="问题描述">问题描述</h2>
<p>问题出现在访问 <code>Child</code> 实例属性 <code>name</code> 时。虽然 <code>&quot;name&quot; in dir(child)</code> 返回 <code>True</code>，表明属性 <code>name</code> 存在，但是直接访问 <code>child.name</code> 却抛出了 <code>AttributeError</code>。</p>
<p>这乍一看上去很奇怪，明明属性存在却无法访问，这是为什么呢？</p>
<h2 id="分析过程">分析过程</h2>
<p>要分析这个问题，首先我们需要对 Python 中属性查找的过程有一定了解。在 Python 中，当我们使用形如 <code>instance.attribute</code> 来访问实例属性时，会先在该实例对象上查找相应的属性，如果找不到就会抛出 <code>AttributeError</code>。而当我们给类加上了 <code>__getattr__</code> 方法时，Python 就会在找不到属性时调用这个<a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__">方法</a>。</p>
<blockquote>
<p><strong>object.__getattr__(self, name)</strong></p>
<p>Called when the default attribute access fails with an <a href="https://docs.python.org/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a> (either <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__"><code>__getattribute__()</code></a> raises an <a href="https://docs.python.org/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a> because name is not an instance attribute or an attribute in the class tree for <code>self</code>; or <a href="https://docs.python.org/3/reference/datamodel.html#object.__get__"><code>__get__()</code></a> of a name property raises <a href="https://docs.python.org/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a>). This method should either return the (computed) attribute value or raise an <a href="https://docs.python.org/3/library/exceptions.html#AttributeError"><code>AttributeError</code></a> exception.</p>
</blockquote>
<p>当我们执行示例代码中的 <code>print(child.name)</code> 这一行时，会有以下 traceback 信息抛出：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln"> 1</span><span class="cl">---------------------------------------------------------------------------
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">KeyError                                  Traceback (most recent call last)
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">Input In [2], in Parent.__getattr__(self, name)
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      5 try:
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">----&gt; 6     return self._fields[name]
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">      7 except KeyError:
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">KeyError: &#39;name&#39;
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl">During handling of the above exception, another exception occurred:
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">AttributeError                            Traceback (most recent call last)
</span></span><span class="line"><span class="ln">13</span><span class="cl">Input In [4], in &lt;cell line: 0&gt;()
</span></span><span class="line"><span class="ln">14</span><span class="cl">----&gt; 1 c.name
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">Input In [2], in Parent.__getattr__(self, name)
</span></span><span class="line"><span class="ln">17</span><span class="cl">      6     return self._fields[name]
</span></span><span class="line"><span class="ln">18</span><span class="cl">      7 except KeyError:
</span></span><span class="line"><span class="ln">19</span><span class="cl">----&gt; 8     raise AttributeError(
</span></span><span class="line"><span class="ln">20</span><span class="cl">      9         f&#34;&#39;{self.__class__.__name__}&#39; object has no attribute &#39;{name}&#39;&#34;,
</span></span><span class="line"><span class="ln">21</span><span class="cl">     10     )
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">AttributeError: &#39;Child&#39; object has no attribute &#39;name&#39;
</span></span><span class="line"><span class="ln">24</span><span class="cl">&gt; &lt;ipython-input-2-b3781a93b20e&gt;(8)__getattr__()
</span></span><span class="line"><span class="ln">25</span><span class="cl">      6             return self._fields[name]
</span></span><span class="line"><span class="ln">26</span><span class="cl">      7         except KeyError:
</span></span><span class="line"><span class="ln">27</span><span class="cl">----&gt; 8             raise AttributeError(
</span></span><span class="line"><span class="ln">28</span><span class="cl">      9                 f&#34;&#39;{self.__class__.__name__}&#39; object has no attribute &#39;{name}&#39;&#34;,
</span></span><span class="line"><span class="ln">29</span><span class="cl">     10             )</span></span></code></pre></div><p>从 traceback 信息中可以看到，<code>child.name</code> 这一次属性访问调用了父类 <code>Parent</code> 的 <code>__getattr__</code> 方法。但是在子类 <code>Child</code> 的定义中，<code>name</code> 这个属性是明显存在的，它的值是 <code>OtherModule</code> 的 <code>name</code> 属性。由于 <code>__getattr__</code> 只有在属性访问抛出 <code>AttributeError</code> 时才会被调用，那么问题根源应该就是 <code>OtherModule.name</code> 抛出了 <code>AttributeError</code>，才会调用到 <code>__getattr__</code>。</p>
<p>事实上也是如此，<code>return OtherModule.name</code> 这一行抛出了 <code>AttributeError</code>，属性访问的行为 fallback 到了 <code>__getattr__</code>。</p>
<h2 id="调试方法">调试方法</h2>
<p>接下来说一下有什么方法可以用来调试这个问题。调试的目的就是为了弄清楚程序逻辑上有什么问题，通常来说有以下几种方法：</p>
<ol>
<li>打断点，使用 <a href="https://docs.python.org/3/library/pdb.html">pdb</a> 进行单步调试</li>
<li>加<a href="https://docs.python.org/3/howto/logging.html">日志</a>，使用二分法，找到错误的位置</li>
</ol>
<h3 id="打断点">打断点</h3>
<p>打断点就是在程序代码中插入 <code>breakpoint()</code>，当程序执行到这行代码时，程序就会停止运行，可以和当前内存中的数据进行交互，方便定位问题。如果是在 REPL 里，也可以通过 <code>import pdb; pdb.run('your code here')</code> 开始单步调试。</p>
<p>以 <a href="https://ipython.org/">IPython</a> 为例，进入 REPL 后执行以下代码来进入单步调试：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">pdb</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">OtherModule</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">   <span class="o">...</span><span class="p">:</span>     <span class="k">pass</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">   <span class="o">...</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">   <span class="o">...</span><span class="p">:</span> <span class="c1"># Parent/Child class definitions</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">pdb</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s1">&#39;c.name&#39;</span><span class="p">)</span>
</span></span><span class="line hl"><span class="ln">11</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span></span></span></code></pre></div><p>然后输入 <strong>s</strong> 回车来跳进 <code>&lt;module&gt;()</code> 里面，输入 <strong>n</strong> 回车来执行下一行，按 <strong>q</strong> 结束调试。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">pdb</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s1">&#39;c.name&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span></span><span class="line hl"><span class="ln"> 3</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">s</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">--</span><span class="n">Call</span><span class="o">--</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span><span class="n">name</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="o">-&gt;</span> <span class="nd">@property</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">n</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span><span class="n">name</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="o">-&gt;</span> <span class="k">return</span> <span class="n">OtherModule</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">n</span>
</span></span><span class="line hl"><span class="ln">11</span><span class="cl"><span class="ne">AttributeError</span><span class="p">:</span> <span class="nb">type</span> <span class="nb">object</span> <span class="s1">&#39;OtherModule&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;name&#39;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span><span class="n">name</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="o">-&gt;</span> <span class="k">return</span> <span class="n">OtherModule</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">n</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="o">--</span><span class="n">Return</span><span class="o">--</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span><span class="n">name</span><span class="p">()</span><span class="o">-&gt;</span><span class="kc">None</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="o">-&gt;</span> <span class="k">return</span> <span class="n">OtherModule</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="o">--</span><span class="n">Call</span><span class="o">--</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="fm">__getattr__</span><span class="p">()</span>
</span></span><span class="line hl"><span class="ln">21</span><span class="cl"><span class="o">-&gt;</span> <span class="k">def</span> <span class="fm">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="fm">__getattr__</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="o">-&gt;</span> <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">q</span></span></span></code></pre></div><p>你也可以在上面第 11 行后输入 <code>p dir(OtherModule)</code> 来查看 <code>OtherModule</code> 对象的属性列表。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">n</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="ne">AttributeError</span><span class="p">:</span> <span class="nb">type</span> <span class="nb">object</span> <span class="s1">&#39;OtherModule&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s1">&#39;name&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">20572</span><span class="n">dc1ce97</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">27</span><span class="p">)</span><span class="n">name</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="o">-&gt;</span> <span class="k">return</span> <span class="n">OtherModule</span><span class="o">.</span><span class="n">name</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span> <span class="n">p</span> <span class="nb">dir</span><span class="p">(</span><span class="n">OtherModule</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="p">[</span><span class="s1">&#39;__class__&#39;</span><span class="p">,</span> <span class="s1">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s1">&#39;__dir__&#39;</span><span class="p">,</span> <span class="s1">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s1">&#39;__eq__&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="s1">&#39;__format__&#39;</span><span class="p">,</span> <span class="s1">&#39;__ge__&#39;</span><span class="p">,</span> <span class="s1">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s1">&#39;__getstate__&#39;</span><span class="p">,</span> <span class="s1">&#39;__gt__&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="s1">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s1">&#39;__init__&#39;</span><span class="p">,</span> <span class="s1">&#39;__init_subclass__&#39;</span><span class="p">,</span> <span class="s1">&#39;__le__&#39;</span><span class="p">,</span> <span class="s1">&#39;__lt__&#39;</span><span class="p">,</span> <span class="s1">&#39;__module__&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="s1">&#39;__ne__&#39;</span><span class="p">,</span> <span class="s1">&#39;__new__&#39;</span><span class="p">,</span> <span class="s1">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s1">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s1">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s1">&#39;__setattr__&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="s1">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s1">&#39;__str__&#39;</span><span class="p">,</span> <span class="s1">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s1">&#39;__weakref__&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">(</span><span class="n">Pdb</span><span class="p">)</span></span></span></code></pre></div><h2 id="用途">用途</h2>
<p>看到这里你可能想问，<code>__getattr__</code> 这个方法有什么用处？接下来就举个例子，用它来实现 wrapper 类。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">Wrapped</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">def</span> <span class="nf">method1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Called method1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="k">def</span> <span class="nf">method2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Called method2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="k">class</span> <span class="nc">Wrapper</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">wrapped</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_wrapped</span> <span class="o">=</span> <span class="n">wrapped</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="k">def</span> <span class="fm">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Calling </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_wrapped</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="n">w</span> <span class="o">=</span> <span class="n">Wrapper</span><span class="p">(</span><span class="n">Wrapped</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="n">w</span><span class="o">.</span><span class="n">method1</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="c1"># Calling method1</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="c1"># Called method1</span></span></span></code></pre></div><p>就像这样，可以很方便地在不修改原来对象的情况下实现对原来对象的方法调用的监控，比如可以加上日志，统计调用量或者加上额外处理等。</p>
<h2 id="bonus">Bonus</h2>
<p>在 Python <a href="https://docs.python.org/3/reference/datamodel.html">Data Model</a> 文档里还有这样一个 <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__">magic method</a>: <code>__getattribute__</code>。它会在属性访问时无条件调用。</p>
<blockquote>
<p><strong>object.__getattribute__(self, name)</strong></p>
<p>Called unconditionally to implement attribute accesses for instances of the class.</p>
</blockquote>
<p>我们知道在 Python 里并没有事实上的私有变量，只有约定上的私有属性。其实借助 <code>__getattribute__</code> 方法，我们就可以把约定上的私有属性变为“事实上”的私有属性。</p>
<details>
    <summary style="color: var(--flexoki-light-blue)">Bonus</summary>
    




<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">public_attr</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">_private_attr</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="k">def</span> <span class="fm">__getattribute__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;_&#34;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;__&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">            <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">Base</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">                <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Unaccessible private attribute: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="n">val</span> <span class="o">=</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__getattribute__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s2">&#34;__dict__&#34;</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">Base</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">val</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">val</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">k</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;_&#34;</span><span class="p">)}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="k">return</span> <span class="n">val</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">
</span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="k">class</span> <span class="nc">Sub</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">
</span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">Base</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">public_attr</span><span class="p">)</span>    <span class="c1"># 0</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">_private_attr</span><span class="p">)</span>  <span class="c1"># 1</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">Sub</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">public_attr</span><span class="p">)</span>    <span class="c1"># 0</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">_private_attr</span><span class="p">)</span>  <span class="c1"># AttributeError: Unaccessible private attribute: _private_attr</span></span></span></code></pre></div>
</details>]]></content:encoded></item><item><title>Python 列表推导式里变量未定义的问题</title><link>https://pagliacii.github.io/silent-lake/blog/a-python-list-comprehensions-scope-problem/</link><pubDate>Sun, 15 Oct 2023 23:29:26 +0800</pubDate><author>huangmianrui0310@gmail.com (Jason Huang)</author><guid>https://pagliacii.github.io/silent-lake/blog/a-python-list-comprehensions-scope-problem/</guid><description>&lt;p>之前在&lt;a href="https://pythonhunter.org/">捕蛇者说&lt;/a>的听众群里有人问了下面这个问题：&lt;/p>
&lt;blockquote>
&lt;p>为什么 &lt;code>eval('''exec(&amp;quot;d={};[d for i in range(1)]&amp;quot;)''',{},{})&lt;/code> 会报错 NameError
而 &lt;code>eval('''exec(&amp;quot;d={};[d for i in range(1)]&amp;quot;,None,{})''')&lt;/code> 和 &lt;code>eval('''exec(&amp;quot;d={};[d]&amp;quot;,None,{})''')&lt;/code> 都不会报错？&lt;/p>
&lt;/blockquote>
&lt;p>挺有趣的，为什么在有 &lt;code>d={}&lt;/code> 的情况下还会出现 &lt;code>NameError&lt;/code> 呢？下面就来分析看看。&lt;/p></description><content:encoded><![CDATA[<p>之前在<a href="https://pythonhunter.org/">捕蛇者说</a>的听众群里有人问了下面这个问题：</p>
<blockquote>
<p>为什么 <code>eval('''exec(&quot;d={};[d for i in range(1)]&quot;)''',{},{})</code> 会报错 NameError
而 <code>eval('''exec(&quot;d={};[d for i in range(1)]&quot;,None,{})''')</code> 和 <code>eval('''exec(&quot;d={};[d]&quot;,None,{})''')</code> 都不会报错？</p>
</blockquote>
<p>挺有趣的，为什么在有 <code>d={}</code> 的情况下还会出现 <code>NameError</code> 呢？下面就来分析看看。</p>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">使用的 Python 版本为 <strong>3.11.2</strong></p>
</div>
<h3 id="tldr">TL;DR</h3>
<p><code>exec</code> 在执行 Python 语句时有自己的局部作用域，同时列表推导式也有自己的局部作用域。在全局作用域里没有 <code>d</code> 这个变量的情况下，列表推导式并不能够获取到 <code>exec</code> 执行时的局部作用域里的 <code>d</code>。</p>
<h2 id="简化问题">简化问题</h2>
<p>首先可以把这个问题拆分成以下三个部分：</p>
<ol>
<li>最外层的 <code>eval</code> 函数的作用。</li>
<li>中间的 <code>exec</code> 函数的作用。</li>
<li>最里层的列表推导式。</li>
</ol>
<h2 id="eval-函数"><code>eval</code> 函数</h2>
<p>在 repl 里输入 <code>help(eval)</code> 可以得到下面的这段输出：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">eval(source, globals=None, locals=None, /)
</span></span><span class="line"><span class="cl">    Evaluate the given source in the context of globals and locals.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    The source may be a string representing a Python expression
</span></span><span class="line"><span class="cl">    or a code object as returned by compile().
</span></span><span class="line"><span class="cl">    The globals must be a dictionary and locals can be any mapping,
</span></span><span class="line"><span class="cl">    defaulting to the current globals and locals.
</span></span><span class="line"><span class="cl">    If only globals is given, locals defaults to it.</span></span></code></pre></div><p>从上面的 help 文档，我们可以知道 <code>eval</code> 函数会去评估 (evaluate) 一条 Python 表达式 (<em>expression</em>)，并支持通过参数来指定 <strong>globals</strong> 和 <strong>locals</strong> 两个作用域<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<p>接着看回原来的问题，可以看到包含了两种情况：</p>
<ol>
<li><code>eval(source, {}, {})</code>: 在 <code>globals</code> 和 <code>locals</code> 都为空的条件下评估 <code>source</code></li>
<li><code>eval(source, None, {})</code>: 在默认的 <code>globals</code> 以及空的 <code>locals</code> 下评估 <code>source</code></li>
</ol>
<p>那么接下来看看 <code>source</code> 是什么。</p>
<h2 id="exec-函数"><code>exec</code> 函数</h2>
<p>需要被评估的代码是 <code>exec(&quot;d={};[d for i in range(1)]&quot;)</code> 和 <code>exec(&quot;d={};[d]&quot;)</code>，所以还是先看看 <code>exec</code> 函数的文档：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">exec(source, globals=None, locals=None, /, *, closure=None)
</span></span><span class="line"><span class="cl">    Execute the given source in the context of globals and locals.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    The source may be a string representing one or more Python statements
</span></span><span class="line"><span class="cl">    or a code object as returned by compile().
</span></span><span class="line"><span class="cl">    The globals must be a dictionary and locals can be any mapping,
</span></span><span class="line"><span class="cl">    defaulting to the current globals and locals.
</span></span><span class="line"><span class="cl">    If only globals is given, locals defaults to it.
</span></span><span class="line"><span class="cl">    The closure must be a tuple of cellvars, and can only be used
</span></span><span class="line"><span class="cl">    when source is a code object requiring exactly that many cellvars.</span></span></code></pre></div><p>也就是说 <code>exec</code> 函数会在给定的 <code>globals</code> 和 <code>locals</code> 下执行 Python 语句 (<em>statements</em>)。</p>
<p>那么原来的问题也就可以简化为以下 4 种情况：</p>
<ol>
<li><code>exec(&quot;d={};[d for i in range(1)]&quot;, {}, {})</code></li>
<li><code>exec(&quot;d={};[d for i in range(1)]&quot;, None, {})</code></li>
<li><code>exec(&quot;d={};[d]&quot;, {}, {})</code></li>
<li><code>exec(&quot;d={};[d]&quot;, None, {})</code></li>
</ol>
<p>所以什么情况下会出现 <code>NameError</code> 的异常呢？原因就在于 Python 中很常用的列表推导式身上。</p>
<h2 id="列表推导式">列表推导式</h2>
<p><code>exec</code> 函数执行的语句分别由两条语句组成，前者为赋值语句，后者则是构造一个列表，只不过构造方式有所差异。</p>
<p><code>[d for i in range(1)]</code> 是一个列表推导式，而 <code>[d]</code> 则是一个列表字面量。</p>
<p>第一眼看上去 <code>d={}</code> 这条赋值语句会在当前作用域添加一个变量 <code>d</code>，而后构造列表时应该可以访问到 <code>d</code> 才对，就像以下代码一样：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">print</span><span class="p">([</span><span class="n">d</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">)])</span>  <span class="c1"># =&gt; [{}]</span></span></span></code></pre></div><p>既然现在出现了 <code>NameError</code> 的异常，也就说明列表推导式执行时找不到 <code>d</code> 这个变量，而 <code>d={}</code> 明显给 <code>d</code> 赋值了。<code>d</code> 到哪里去了？</p>
<p>首先可以确定的是 <code>d</code> 是一定存在的，因为有赋值语句，只是现在找不到它而已。而 <code>d</code> 会存在的地方有两个，就是 <strong>globals</strong> 和 <strong>locals</strong> 这两个作用域的其中一个。</p>
<p>原问题里是传了两个字典字面量，这不方便后续访问，我们可以用两个变量来替代：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">my_globals</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">my_locals</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="s2">&#34;d = </span><span class="si">{}</span><span class="s2">; [d for i in range(1)]&#34;</span><span class="p">,</span> <span class="n">my_globals</span><span class="p">,</span> <span class="n">my_locals</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># NameError: name &#39;d&#39; is not defined</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_globals</span><span class="p">)</span>  <span class="c1"># =&gt; {}</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_locals</span><span class="p">)</span>  <span class="c1"># =&gt; {&#39;d&#39;: {}}</span></span></span></code></pre></div><p><code>d</code> 出现了，在 <strong>locals</strong> 里。那么问题来了，既然在 <strong>locals</strong> 里，为啥列表推导式里会访问不了 <code>d</code> 呢？我们可以在列表推导式里获取 <strong>locals</strong>，比较一下有什么差别：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">my_locals</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="s2">&#34;d = </span><span class="si">{}</span><span class="s2">; c = [locals() for i in range(1)]&#34;</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="n">my_locals</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_locals</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="c1"># Result:</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="p">{</span><span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="p">{},</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[{</span><span class="s1">&#39;.0&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">range_iterator</span> <span class="n">at</span> <span class="mh">0x1f65cbccd10</span><span class="o">&gt;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}]}</span></span></span></code></pre></div><p>可以看到 <code>my_locals[&quot;c&quot;]</code> 的值并不等于 <code>my_locals</code>。那么问题原因基本上也就可以确定了，就是<strong>列表推导式有自己的局部作用域</strong>。</p>
<p>而 <code>exec</code> 在执行语句的时候，也存在着自己的局部作用域，即我们传入的 <code>my_locals</code>。</p>
<p>列表推导式只能访问它自己的局部作用域和全局作用域，但是默认的全局作用域里并没有 <code>d</code> 存在，所以会出现 <code>NameError</code>。</p>
<p>那么如果我们分别在传入的 <code>my_globals</code> 和 <code>my_locals</code> 里保存一个不同值的 <code>d</code>，最终生成的列表是怎样的呢？</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">my_globals</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;d&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">my_locals</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;d&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="s2">&#34;a = 1; c = [d for i in range(1)]&#34;</span><span class="p">,</span> <span class="n">my_globals</span><span class="p">,</span> <span class="n">my_locals</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_globals</span><span class="p">[</span><span class="s2">&#34;d&#34;</span><span class="p">])</span> <span class="c1"># =&gt; 1</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_locals</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="c1"># Result:</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">{</span><span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]}</span></span></span></code></pre></div><h2 id="等价情况">等价情况</h2>
<p>在 <a href="https://docs.python.org/3.11/library/functions.html#exec">Python 文档</a>里关于 <code>exec</code> 函数的说明里有这么一句话：</p>
<blockquote>
<p>If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition.</p>
</blockquote>
<p>那么上述代码就可以等价于以下代码：</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="k">class</span> <span class="nc">T</span><span class="p">:</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="n">d</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">  <span class="c1"># print(locals()) =&gt; {&#39;__module__&#39;: &#39;__main__&#39;, &#39;__qualname__&#39;: &#39;T&#39;, &#39;a&#39;: 1, &#39;d&#39;: 2, &#39;c&#39;: [1]}</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl">
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">T</span><span class="o">.</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; True</span></span></span></code></pre></div><h2 id="disassembly">Disassembly</h2>
<p>当时群里<a href="https://space.bilibili.com/245645656">大佬</a>提了一下可以用 <a href="https://docs.python.org/3/library/dis.html"><code>dis</code></a> 来查看 CPython 的 <a href="https://docs.python.org/3/glossary.html#term-bytecode">bytecode</a>，就可以看到列表推导式里使用了 <a href="https://docs.python.org/3/library/dis.html#opcode-LOAD_GLOBAL">LOAD_GLOBAL</a> 指令从全局作用域里加载变量。</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">&gt;&gt;&gt; dis.dis(&#34;[a for _ in range(1)]&#34;)
</span></span><span class="line"><span class="cl">  0           0 RESUME                   0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  1           2 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x000002BD5774D0D0, file &#34;&lt;dis&gt;&#34;, line 1&gt;)
</span></span><span class="line"><span class="cl">              4 MAKE_FUNCTION            0
</span></span><span class="line"><span class="cl">              6 PUSH_NULL
</span></span><span class="line"><span class="cl">              8 LOAD_NAME                0 (range)
</span></span><span class="line"><span class="cl">             10 LOAD_CONST               1 (1)
</span></span><span class="line"><span class="cl">             12 PRECALL                  1
</span></span><span class="line"><span class="cl">             16 CALL                     1
</span></span><span class="line"><span class="cl">             26 GET_ITER
</span></span><span class="line"><span class="cl">             28 PRECALL                  0
</span></span><span class="line"><span class="cl">             32 CALL                     0
</span></span><span class="line"><span class="cl">             42 RETURN_VALUE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of &lt;code object &lt;listcomp&gt; at 0x000002BD5774D0D0, file &#34;&lt;dis&gt;&#34;, line 1&gt;:
</span></span><span class="line"><span class="cl">  1           0 RESUME                   0
</span></span><span class="line"><span class="cl">              2 BUILD_LIST               0
</span></span><span class="line"><span class="cl">              4 LOAD_FAST                0 (.0)
</span></span><span class="line"><span class="cl">        &gt;&gt;    6 FOR_ITER                 9 (to 26)
</span></span><span class="line"><span class="cl">              8 STORE_FAST               1 (_)
</span></span><span class="line hl"><span class="cl">             10 LOAD_GLOBAL              0 (a)
</span></span><span class="line"><span class="cl">             22 LIST_APPEND              2
</span></span><span class="line"><span class="cl">             24 JUMP_BACKWARD           10 (to 6)
</span></span><span class="line"><span class="cl">        &gt;&gt;   26 RETURN_VALUE</span></span></code></pre></div><div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p><a href="https://en.wikipedia.org/wiki/Scope_(computer_science)">https://en.wikipedia.org/wiki/Scope_(computer_science)</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>]]></content:encoded></item></channel></rss>